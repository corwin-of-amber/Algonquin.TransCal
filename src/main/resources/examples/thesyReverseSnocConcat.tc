reverse ?l = l match ((âŸ¨âŸ© => âŸ¨âŸ©) / ((?x :: ?xs) => (reverse xs) :+ x))

Cons ?x ?l >> x :: l [typedlet]
?x :: ?l >> Cons ?x ?l [notypes]
snoc ?l ?x = l :+ x [typedlet]
?l :+ ?x >> snoc ?l ?x [notypes]
concat ?l1 ?l2 >> l1 ++ l2 [typedlet]
?l1 ++ ?l2 >> concat ?l1 ?l2 [typedlet]

thesy (list,) ((cons : int :> list int :> list int), reverse, snoc, (concat : list int :> list int :> list int)) 3 8 0

reverse(l1 ++ l2) = reverse(t1 ++ t2) [++]

reverse(l1 ++ l2) -> reverse(l2) ++ reverse(l1)
