reverse ?l = l match ((⟨⟩ => ⟨⟩) / ((?x :: ?xs) => snoc (reverse xs) x))

cons ?x ?l >> x :: l
?x :: ?l >> cons ?x ?l [notypes]

snoc ?l ?x = l ++ cons(x, ⟨⟩) [typedlet]

concat ⟨⟩ ?l2 >> id l2
concat (cons(?x, ?xs)) ?l2 = cons(x, (concat xs l2))

SPBE ( ⟨⟩ , (cons : int :> list int :> list int) ) (⟨⟩ ,(cons : int :> list int :> list int), (concat : list int :> list int :> list int)) 3 6 0 1 2 3
SPBE ( ⟨⟩ , (cons : int :> list int :> list int) ) ((cons : int :> list int :> list int), (snoc : list int :> int :> list int), (concat : list int :> list int :> list int), (reverse : list int :> list int)) 3 8 0

reverse(l1 ++ l2) = reverse(t1 ++ t2) [++]

reverse(l1 ++ l2) -> reverse(l2) ++ reverse(l1)
