include "Tree"
include "TreeDefs"
include "List"
include "ListDefs"
include "Utils"
include "UtilsDefs"

Cons ?x ?l >> x :: l [typedlet]
?x :: ?l >> Cons ?x ?l [notypes]
snoc ?l ?x >> l :+ x [typedlet]
?l :+ ?x >> snoc ?l ?x [notypes]
concat ?l1 ?l2 >> l1 ++ l2 [typedlet]
?l1 ++ ?l2 >> concat ?l1 ?l2 [notypes]

concat(?l, Nil) >> id l
concat(concat(?l, ?ll), ?lll) = concat(l, concat(ll, lll))
reverse(reverse(?l)) >> l
cons(?x, reverse(?l)) = reverse(snoc(l, x))
reverse(concat(?l, ?ll)) = concat(reverse(ll), reverse(l))
map f (concat ?l ?ll) = concat (map f l) (map f ll)

// thesy (nil , (cons : int :> list int :> list int)) ((concat : list int :> list int :> list int), (map : (int :> int) :> list int :> list int), reverse, (switch : tree int :> tree int), (tolist : tree int :> list int), (tmap : (int :> int) :> tree int :> tree int), (identity : int :> int)) 3 8 0
thesy (tree,) (switch, tmap, identity) 3 8 0
