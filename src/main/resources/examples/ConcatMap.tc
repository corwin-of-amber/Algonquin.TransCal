concatMap ?f ?l = concat (map  f l)    [++]

concat ?l = l match (⟨⟩ => ⟨⟩) / (?xs :: ?xss) => xs ++ concat xss
map ?f ?l = l match (⟨⟩ => ⟨⟩) / (?x :: ?xs) => (f x) :: map f xs

l = x :: xs
concat _ -> (1)

a1 -> f _ ++ _
f x = l'
l' = x' :: xs'
f _ ++ _ -> a1
a1 -> ?concatMap' f l' xs

a1 -> _ :: _
_ ++ _ -> concatMap' _ _ _