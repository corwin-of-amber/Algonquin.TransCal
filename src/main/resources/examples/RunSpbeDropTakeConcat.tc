drop ?i ?l = i match ((zero => l) / ((suc ?j) => l match ((⟨⟩ => ⟨⟩) / ((?x :: ?xs) => drop j xs)))) [notypes]

cons ?x ?l >> x :: l
?x :: ?l >> cons ?x ?l [notypes]

filter ?p (?x :: ?xs) |>> splitTrue ||| possibleSplit((p x), true, false) [notypes]

SPBE( ⟨⟩ , (cons : int :> list int :> list int) ) ((filter : (int :> boolean) :> list int :> list int),) ((list int, (⟨⟩, x::⟨⟩)),) 2 3

filter pred (filter pred (t)) = filter pred (filter pred (l)) [++]

filter pred (filter pred (l)) -> filter pred l
