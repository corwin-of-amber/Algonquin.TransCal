toList tnil >> nil [typedlet]
toList (Tree ?v ?l ?r) = (toList l) ++ (v::(toList r))

reverse ?l = l match ((⟨⟩ => ⟨⟩) / ((?x :: ?xs) => (reverse xs) :+ x))  [notypes]

switch tnil = tnil
switch (Tree ?v ?l ?r) = Tree v (switch r) (switch l)

cons ?x ?l >> x :: l [typedlet]
?x :: ?l >> cons ?x ?l [notypes]
snoc ?l ?x >> l :+ x [typedlet]
?l :+ ?x >> snoc ?l ?x [notypes]
concat ?l1 ?l2 >> l1 ++ l2 [typedlet]
?l1 ++ ?l2 >> concat ?l1 ?l2 [notypes]

tmap ?f tnil >> tnil [notypes]
tmap ?f (Tree ?v ?l ?r) >> Tree (f v) (tmap f l)  (tmap f r)
reverse (?xs :+ ?x) = x :: (reverse xs)
reverse(reverse(?l)) >> id l

identity ?x >> id x

// tnil, (Tree x tnil tnil), (Tree y tnil tnil), (Tree z tnil (Tree x tnil tnil)), (Tree z (Tree y tnil tnil) tnil), (Tree z (Tree y tnil tnil) (Tree x tnil tnil))

SPBE ((tnil: tree int) , (Tree : int :> tree int :> tree int :> tree int)) ((tmap : (int :> int) :> tree int :> tree int), (identity : int :> int), (toList: tree int :> list int), (reverse: list int :> list int), (switch: tree int :> tree int)) 3 14 0
