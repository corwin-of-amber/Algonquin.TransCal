/* rather basic stream fusion */

filterMap ?p ?f ?l = filter p (map f l)    [++]

map ?f ?l = l match ((⟨⟩ => ⟨⟩) / ((?x :: ?xs) => f x :: map f xs))
filter ?p ?l = l match ((⟨⟩ => ⟨⟩) / ((?x :: ?xs) => ( (p x) match (true => x :: (filter p xs)) / false => filter p xs) ))

l = ?x :: ?xs
->
p (f x) = ⊤

filter _ _  -> (1)    [only assoc]
(1) -> _ :: _

[]
<-
p (f x) = ⊥

filter _ _ -> (1)
(1) -> ?f2 p f xs
