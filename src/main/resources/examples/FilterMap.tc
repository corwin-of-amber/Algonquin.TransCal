/* rather basic stream fusion */

filterMap ?p ?f ?l = filter p (map f l)    [++]

map ?f ?l = l match ((⟨⟩ => ⟨⟩) / ((?x :: ?xs) => f x :: map f xs))
filter ?p ?l = l match ((⟨⟩ => ⟨⟩) / ((?x :: ?xs) => ( (p x) match (true => x :: (filter p xs)) / false => filter p xs) ))

l = x :: xs
->
p (f x) = ⊤

filter _ _  -> a1    [only assoc]
a1 -> _ :: _

[]
<-
p (f x) = ⊥
filter _ _ -> a1
a1 -> filter _ (map _ xs)

a1 -> ?f2 p f xs
