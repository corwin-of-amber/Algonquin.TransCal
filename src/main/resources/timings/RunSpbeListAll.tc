fold ?f ?i ?l = l match ((⟨⟩ => id i) / ((?x :: ?xs) => fold f (f(x,i)) xs)) [notypes]

concat ?l1 ?l2 >> l1 ++ l2 [typedlet]
?l1 ++ ?l2 >> concat ?l1 ?l2 [typedlet]

Cons ?x ?l >> x :: l [typedlet]
?x :: ?l >> Cons ?x ?l [notypes]
snoc ?l ?x = l :+ x [typedlet]
?l :+ ?x >> snoc ?l ?x [notypes]
map ?f nil >> nil [notypes]
map ?f (?x::?xs) = (f x)::(map f xs) [notypes]

pl ?x ?y >> ?x + ?y [typedlet]
?x + ?y >> pl ?x ?y [notypes]

len ?l = l match ((⟨⟩ => 0) / ((?x :: ?xs) => 1 + len(xs)))  [notypes]

reverse ?l = l match ((⟨⟩ => ⟨⟩) / ((?x :: ?xs) => (reverse xs) :+ x)) [notypes]

thesy(list,) ((map : (int :> int) :> list int :> list int), (cons : int :> list int :> list int), snoc, (concat : list int :> list int :> list int), (fold : (int :> int :> int) :> int :> (list int) :> int), reverse) 3 8 0
//thesy(list,) ((len : list int :> int), pl, (map : (int :> int) :> list int :> list int), (cons : int :> list int :> list int), snoc, (concat : list int :> list int :> list int), (fold : (int :> int :> int) :> int :> (list int) :> int), reverse) 3 6 0