filter ?p ?l = l match ((⟨⟩ => ⟨⟩) / ((?x :: ?xs) => (p x) match ((true =>  x :: (filter p xs)) / (false => filter p xs)))) [notypes]

Cons ?x ?l >> x :: l [typedlet]
?x :: ?l >> Cons ?x ?l [notypes]

filter ?p (cons ?x ?xs) |>> splitTrue ||| possibleSplit((p x), true, false) [typedlet]

thesy(list,) ((filter : (int :> boolean) :> list int :> list int),) ((list int, (⟨⟩, x::⟨⟩)),) 3 3 2 2

filter p (filter q (t)) = filter p (filter q (l)) [++]

filter p (filter q (l)) -> filter q (filter p l)

filter p (filter q (l)) -> filter (And p q) l
