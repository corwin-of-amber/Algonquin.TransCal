tmap ?f tnil >> tnil [notypes]
tmap ?f (Tree ?v ?l ?r) >> Tree (f v) (tmap f l)  (tmap f r)

identity ?x >> id x
// tnil, (Tree x tnil tnil), (Tree y tnil tnil), (Tree z tnil (Tree x tnil tnil)), (Tree z (Tree y tnil tnil) tnil), (Tree z (Tree y tnil tnil) (Tree x tnil tnil))

switch tnil = tnil
switch (Tree ?v ?l ?r) = Tree v r l

reverse ?l = l match ((⟨⟩ => ⟨⟩) / ((cons ?x ?xs) => snoc (reverse xs) x))

cons ?x ?l >> x :: l [typedlet]
?x :: ?l >> cons ?x ?l [notypes]
snoc ?l ?x >> l :+ x [typedlet]
?l :+ ?x >> snoc ?l ?x [notypes]
concat ?l1 ?l2 >> l1 ++ l2 [typedlet]
?l1 ++ ?l2 >> concat ?l1 ?l2 [notypes]

tolist tnil = nil
tolist (Tree ?v ?l ?r) = concat (tolist l) (cons v (tolist r))

concat(?l, ⟨⟩) >> id l
concat(concat(?l, ?ll), ?lll) = concat(l, concat(ll, lll))
reverse(reverse(?l)) >> l
cons(?x, reverse(?l)) = reverse(snoc(l, x))
reverse(concat(?l, ?ll)) = concat(reverse(ll), reverse(l))
map ?f ?l = l match (⟨⟩ => ⟨⟩) / ((cons ?x ?xs) => cons (f x) (map f xs))
map f (concat ?l ?ll) = concat (map f l) (map f ll)

// SPBE (nil , (cons : int :> list int :> list int)) ((concat : list int :> list int :> list int), (map : (int :> int) :> list int :> list int), (reverse : list int :> list int), (switch : tree int :> tree int), (tolist : tree int :> list int), (tmap : (int :> int) :> tree int :> tree int), (identity : int :> int)) ((list int, (⟨⟩, x::⟨⟩, y::x::⟨⟩)),) 8 0
SPBE ((tnil: tree int) , (Tree : int :> tree int :> tree int :> tree int)) ((switch : tree int :> tree int), (tmap : (int :> int) :> tree int :> tree int), (identity : int :> int)) ((tree int, (tnil, (Tree x tnil tnil), (Tree y tnil tnil), (Tree z tnil (Tree x tnil tnil)), (Tree z (Tree y tnil tnil) tnil), (Tree z (Tree y tnil tnil) (Tree x tnil tnil)))),) 8 0
