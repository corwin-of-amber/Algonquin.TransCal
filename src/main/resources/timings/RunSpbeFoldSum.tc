sum ?l = l match ((âŸ¨âŸ© => 0) / ((?x :: ?xs) => x + sum(xs))) [notypes]
fold ?f ?i ?l = l match ((âŸ¨âŸ© => id i) / ((?x :: ?xs) => fold f (f(x,i)) xs)) [notypes]

Cons ?x ?l >> x :: l [typedlet]
?x :: ?l >> Cons ?x ?l [notypes]
pl ?x ?y >> x + y [typedlet]
?x + ?y >> pl ?x ?y [notypes]
zero = 0

// (?f: associative |||| (f(?x, f(?y, ?t)) ||| ?z) |>> z ||| f(f(x, y), t) [typedlet]

//thesy(list,) ((fold : (int :> int :> int) :> int :> (list int) :> int), (pl : (int :> int :> int))) 3 8 0
thesy(list,) ((zero : int), (sum : list int :> int), (fold : (int :> int :> int) :> int :> (list int) :> int), (pl : (int :> int :> int))) 3 8 0