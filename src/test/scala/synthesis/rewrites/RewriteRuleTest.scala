package synthesis.rewrites

import org.scalatest.{FunSuite, Matchers}
import structures.{EmptyMetadata, HyperEdge}
import structures.immutable.{HyperGraphManyWithOrderToOne, VocabularyHyperGraph}
import syntax.Identifier
import synthesis.rewrites.Template.{ExplicitTerm, TemplateTerm}
import synthesis.{HyperTermId, HyperTermIdentifier}

class RewriteRuleTest extends FunSuite with Matchers {

  test("testApply adds edges") {
    val conditions = VocabularyHyperGraph[TemplateTerm, TemplateTerm](Set(HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(8))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(1))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(47))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(23))),Vector(ExplicitTerm(HyperTermId(50))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(21))),Vector(ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(38))),Vector(ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(8))),Vector(ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(19))),Vector(),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(25))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(45))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(0))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(12))),Vector(ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(35))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(36))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1))),EmptyMetadata)))
    val destinations = VocabularyHyperGraph[TemplateTerm, TemplateTerm](Set(HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(23))),Vector(),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(36))),Vector(ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(28))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(32))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(48))),Vector(ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(23))),Vector(ExplicitTerm(HyperTermId(50))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(23))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(13))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(46))),Vector(),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(40))),Vector(ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(45))),Vector(),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(38))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(25))),Vector(ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(28))),Vector(ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(32))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(23))),Vector(ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(26))),Vector(ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(41))),Vector(ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(5))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(35))),Vector(ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(50))),Vector(ExplicitTerm(HyperTermId(50))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(37))),Vector(ExplicitTerm(HyperTermId(50))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(0))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(25))),Vector(ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(6))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(50)),ExplicitTerm(HyperTermIdentifier(new Identifier(7))),Vector(ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1))),EmptyMetadata), HyperEdge(ExplicitTerm(HyperTermId(1)),ExplicitTerm(HyperTermIdentifier(new Identifier(45))),Vector(ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1)), ExplicitTerm(HyperTermId(50)), ExplicitTerm(HyperTermId(1))),EmptyMetadata)))
    val ruleType = RewriteRule.Category.Existential
    val rewriteRule = new RewriteRule(conditions, destinations, (a, b) => EmptyMetadata)
    val templateTermToHyperTermId: Template.TemplateTerm => HyperTermId = RewriteRulePropSpec.mapper(Stream.from(0).map(HyperTermId).iterator)
    val templateTermToHyperTermIdentifier: Template.TemplateTerm => HyperTermIdentifier = RewriteRulePropSpec.mapper(Stream.from(0).map(new Identifier(_)).map(HyperTermIdentifier).iterator)
    val state = new RewriteSearchState(HyperGraphManyWithOrderToOne[HyperTermId, HyperTermIdentifier](conditions.edges.map(edge => {
      HyperEdge[HyperTermId, HyperTermIdentifier](templateTermToHyperTermId(edge.target), templateTermToHyperTermIdentifier(edge.edgeType), edge.sources.map(templateTermToHyperTermId), EmptyMetadata)
    })))
    val newState = rewriteRule.apply(state)
    val expectedEdges = (destinations.edges -- conditions.edges).map(e => HyperEdge(e.target.asInstanceOf[ExplicitTerm].term, e.edgeType.asInstanceOf[ExplicitTerm].term, e.sources.map(_.asInstanceOf[ExplicitTerm].term), e.metadata))
    expectedEdges.size shouldEqual (newState.graph.edges -- state.graph.edges).size
  }

}
