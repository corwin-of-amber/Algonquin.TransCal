filter (materialize)
//
filter 1 2 3
:: 3 4 5

@ 6 2 4

filter []
// filter p [] -> []
filter 1 2 3
[] 3

id 1 3

filter :: T
// (p x = T) |- filter p (x :: xs) -> x :: filter p xs
filter 1 2 3
:: 3 4 5
@ 6 2 4
T 6

:: 1 4 7
filter 7 2 5

filter :: F
// (p x = F) |- filter p (x :: xs) -> filter p xs
filter 1 2 3
:: 3 4 5
@ 6 2 4
F 6

filter 1 2 5

flatten (p)
// @ (p) x -> p x
@ 1 2 3
(p) 2

p 1 3

flatten (q)
// @ (q) x -> q x
@ 1 2 3
(q) 2

q 1 3

@ o
// @ (f o g) x -> @ f (@ g x)
@ 1 2 3
o 2 4 5

@ 1 4 6
@ 6 5 3

@ &&1
// @ (f &&1 g) x -> (@ f x) && (@ g x)
@ 1 2 3
&&1 2 4 5

&& 1 6 7
@ 7 4 3
@ 6 5 3