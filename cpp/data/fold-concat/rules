++ []
// [] ++ xs -> xs
++ 1 2 3
[] 2

id 1 3

++ ::
// (x :: xs) ++ ys -> x :: (xs ++ ys)
++ 1 2 3
:: 2 4 5

:: 1 4 6
++ 6 5 3

++ []r
// xs ++ [] -> xs
++ 1 2 3
[] 3

id 1 2

fold []
// fold f [] i -> i
fold 1 2 3 4
[] 3

id 1 4

fold ::
// fold f (x :: xs) i -> fold f xs (f i x)
fold 1 2 3 4
:: 3 5 6

fold 1 2 6 7
@ 7 2 4 5

flatten (f)
// @ (f) x y -> f x y
@ 1 2 3 4
(f) 2

f 1 3 4